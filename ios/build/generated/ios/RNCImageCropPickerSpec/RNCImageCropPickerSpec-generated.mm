/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#import "RNCImageCropPickerSpec.h"

@implementation RCTCxxConvert (NativeImageCropPicker_PickerOptions)
+ (RCTManagedPointer *)JS_NativeImageCropPicker_PickerOptions:(id)json
{
  return facebook::react::managedPointer<JS::NativeImageCropPicker::PickerOptions>(json);
}
@end
namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeImageCropPickerSpecJSI_openPicker(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "openPicker", @selector(openPicker:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeImageCropPickerSpecJSI_openCamera(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "openCamera", @selector(openCamera:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeImageCropPickerSpecJSI_openCropper(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "openCropper", @selector(openCropper:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeImageCropPickerSpecJSI_clean(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "clean", @selector(clean:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeImageCropPickerSpecJSI_cleanSingle(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "cleanSingle", @selector(cleanSingle:resolve:reject:), args, count);
    }

  NativeImageCropPickerSpecJSI::NativeImageCropPickerSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_["openPicker"] = MethodMetadata {1, __hostFunction_NativeImageCropPickerSpecJSI_openPicker};
        setMethodArgConversionSelector(@"openPicker", 0, @"JS_NativeImageCropPicker_PickerOptions:");
        
        methodMap_["openCamera"] = MethodMetadata {1, __hostFunction_NativeImageCropPickerSpecJSI_openCamera};
        setMethodArgConversionSelector(@"openCamera", 0, @"JS_NativeImageCropPicker_PickerOptions:");
        
        methodMap_["openCropper"] = MethodMetadata {1, __hostFunction_NativeImageCropPickerSpecJSI_openCropper};
        setMethodArgConversionSelector(@"openCropper", 0, @"JS_NativeImageCropPicker_PickerOptions:");
        
        methodMap_["clean"] = MethodMetadata {0, __hostFunction_NativeImageCropPickerSpecJSI_clean};
        
        
        methodMap_["cleanSingle"] = MethodMetadata {1, __hostFunction_NativeImageCropPickerSpecJSI_cleanSingle};
        
  }
} // namespace facebook::react
